package it.ftpmeter.db;

import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

import org.apache.log4j.Logger;
import org.hsqldb.persist.HsqlProperties;
import org.hsqldb.server.Server;
import org.hsqldb.server.ServerAcl.AclFormatException;

public class HSqlStarter {

	public static final Logger log = Logger.getLogger(HSqlStarter.class);
	public static final Server server = new Server();

	/**
	 * @param args
	 * @throws AclFormatException
	 * @throws IOException
	 * @throws ClassNotFoundException
	 * @throws SQLException 
	 */
	public static void startDB(boolean dropdb) throws IOException, AclFormatException, ClassNotFoundException, SQLException {
		log.info("Starting Database ...");
		HsqlProperties p = new HsqlProperties();
		p.setProperty("server.database.0", "file:./db/crm");
		p.setProperty("server.dbname.0", "ftpmeter");
		p.setProperty("server.port", "9001");		
		server.setProperties(p);
		server.setLogWriter(null); // can use custom writer
		server.setErrWriter(null); // can use custom writer
		server.start();
		log.info("Starting Database ... OK");
		if (dropdb) {
			dropDB();
		}
		try {
			initializeDB();
		} catch (SQLException e) {
			log.error("Errore durante l'inizializzazione del Database");
			throw e;
		}
		
	}

	private static void initializeDB() throws ClassNotFoundException, SQLException {
		Connection connection = null;

		try {
			// Getting a connection to the newly started database
			Class.forName("org.hsqldb.jdbcDriver");
			connection = DriverManager.getConnection("jdbc:hsqldb:hsql://localhost/ftpmeter", "sa", "");
			try {
				log.info("Creating sequence pkseq ...");
				connection.prepareStatement("CREATE SEQUENCE pkseq").execute();
			} catch (SQLException e) {
				log.info("Creating sequence pkseq ... sequence already exists?");
				log.debug(e);
			}try{
				log.info("Creating table fme_execution ...");
				connection.prepareStatement("create table fme_execution (" +
						"id BIGINT GENERATED BY DEFAULT AS SEQUENCE pkseq PRIMARY KEY, " + // PK
						"nm_sender VARCHAR(64), " + // nome del sender
						"pg_execution BIGINT, " + // numero di esecuzione
						"dt_start TIMESTAMP, " + // data di avvio della i-esima esecuzione
						"dt_end TIMESTAMP, " + // data di completamento della i-esima esecuzione
						"nd_duration DOUBLE, " + // start - end della i-esima esecuzione
						"ni_size BIGINT, " + // dimensione in byte dei dati trasferiti
						"nd_speed DOUBLE, " + // MB/s
						"nd_speedbit DOUBLE) ") // Mbit/s
						.execute();
			} catch (SQLException e) {
				// Tabella già esistente non faccio niente
				log.info("Creating table fme_execution ... table already exists?");
				log.debug(e);
			}

			connection.prepareStatement("select * from fme_execution;").executeQuery();

			// Checking if the data is correct
//			if (rs.next())
//				System.out.println("Execution: " + rs.getObject(1) + " dt_start: " + rs.getObject(2));
		} finally {
			// Closing the connection
			if (connection != null) {
				connection.close();
			}

		}
	}
	
	
	public static void stop() {		
		server.stop();
		
	}

	private static void dropDB() throws SQLException {
		Connection connection = null;
		// We have here two 'try' blocks and two 'finally'
		// blocks because we have two things to close
		// after all - HSQLDB server and connection
		try {

			// Default user of the HSQLDB is 'sa'
			// with an empty password
			connection = DriverManager.getConnection("jdbc:hsqldb:hsql://localhost/ftpmeter", "sa", "");

			connection.prepareStatement("DROP TABLE 'FME_EXECUTION'").execute();

			log.info("DB pulito");
			
		} finally {
			// Closing the connection
			if (connection != null) {
				connection.close();
			}

		}
	}
}
